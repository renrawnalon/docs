function parse_git_branch () {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
BLUE="\[\033[0;34m\]"
NO_COLOR="\[\033[0m\]"

export PROMPT_COMMAND='PS1X=$(p="${PWD#${HOME}}"; [ "${PWD}" != "${p}" ] && printf "~"; IFS=/; for q in ${p:1}; do printf /${q:0:2}; done; printf "${q:2}")'
export PS1="$NO_COLOR\${PS1X}$YELLOW\$(parse_git_branch)$NO_COLOR\$ "
export SVN_EDITOR=vim
export EDITOR=vim
export PATH=$PATH:/Users/renrawnalon/android-sdk-macosx/platform-tools/
export PATH=$PATH:/Users/renrawnalon/android-sdk-macosx/platforms/:/usr/bin/
export PATH=$PATH:$HOME/infer-osx/infer/bin
export PATH=$PATH:/opt/local/bin:/opt/local/sbin
export PATH=$PATH:$HOME/.local/bin

# Setting PATH for Python 2.7
# The orginal version is saved in .bash_profile.pysave
export PATH=$PATH:/Library/Frameworks/Python.framework/Versions/2.7/bin

# Unversioned aliases 
if [ -f ~/.bash_aliases ];
then
	echo 'Sourced .bash_aliases'
	source ~/.bash_aliases
fi

# cd ../.. = cd ...
# Source: http://www.commandlinefu.com/commands/view/3936
cd() { if [[ "$1" =~ ^\.\.+$ ]];then local a dir;a=${#1};while [ $a -ne 1 ];do dir=${dir}"../";((a--));done;builtin cd $dir;else builtin cd "$@";fi ;}

# git autocomplete
source ~/.git-completion.bash

# bash Aliases
alias ll='ls -la'
alias mkdir="mkdir -p"
# less interprets color escape sequences instead of
# just printing them to the screen
alias less="less -R"

alias tree="tree -NC -l"

# Xcode Aliases
alias purgeallbuilds='rm -rf ~/Library/Developer/Xcode/DerivedData/*'

# vim Aliases
alias bashrc="vim $HOME/.bashrc; if [ -f $HOME/.bash_profile ] ; then . $HOME/.bash_profile ; echo 'Sourced .bash_profile' ; else . $HOME/.bashrc ; echo 'Sourced .bashrc' ; fi"
alias bashaliases="vim $HOME/.bash_aliases; . $HOME/.bash_aliasees ; echo 'Sourced .bash_aliases' ;"
alias vimrc="vim $HOME/.vimrc"
alias gitconfig="vim $HOME/.gitconfig"
alias vimproj="echo $(git rev-parse --show-toplevel); vim  $(git rev-parse --show-toplevel)/*.xcodeproj/project.pbxproj"
alias vim='vim -p ' # make sure vim opens up tabs for multiple files

# git Aliases
alias ga='git add'
alias gaA='git add -A'
alias gap='git add -p'
alias gaproj='git aproj'
alias gb='git branch'
alias gc='git commit'
alias gca='git commit --amend'
alias gco='git checkout'
alias gcp='git cherry-pick'
alias gd='git diff'
alias gdt='git difftool'
alias gdc='git diff --cached'
alias gf='git fetch'
alias gfa='git fetch --all'
alias gfp='git fetch -p'
alias gl='git log'
alias gmnf='git merge --no-ff'
alias gs='git status'
alias grb='git rebase'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias grbi='git rebase -i'
alias grbo='git rebase --onto'
alias grhe='git reset HEAD'
alias grha='git reset --hard'
alias gst='git stash'

# gitk Aliases
alias gitk='gitk 2>/dev/null &'

# screen Aliases
alias screen='screen -R'

# puppie Aliases
alias pshow='LC_ALL=C gpg -d ~/cute_puppies/cute_puppies.gpg'
alias pedit='LC_ALL=C ~/docs/vigpg ~/cute_puppies/cute_puppies.gpg'

# git helper functions

function glga ()
{
	ssh-gas -q ; git log --show-signature --graph --decorate --color --all "$@" | less -R
}

function glg ()
{
	ssh-gas -q ; git log --show-signature --graph --decorate --color "$@" | less -R
}

function garbc ()
{
	ssh-gas -q ; git add -A ; git rebase --continue
}

function gaca ()
{
	ssh-gas -q ; git add -A ; git commit --amend
}

function gcm ()
{
	ssh-gas -q ; git commit -m "$*"
}

function gcam ()
{
	ssh-gas -q ; git commit -a -m "$*"
}

function gcAm ()
{
	ssh-gas -q ; git add -A ; git commit -m "$*"
}

function gcmp ()
{
	ssh-gas -q ; git commit -m "$*" ; git push
}

function gcamp ()
{
	ssh-gas -q ; git commit -a -m "$*" ; git push
}

function gcAmp ()
{
	ssh-gas -q ; git add -A ; git commit -m "$*" ; git push
}

# SSH Get Auth Sock.
# This is a command to automatically update the SSH_AUTH_SOCK env var.
# If "-q" is passed, then nothing will be output on error.
# If "-v" is passed, then the auth sock that is currently being used
# will be output.
# (This is needed when connecting to a previously running
# screen session, since the SSH_AUTH_SOCK variable will be the
# previous one we were using.  We need a new updated one
# for this new connection.)
function ssh-gas ()
{
	local QUIET=""
	local VERBOSE=""

	for arg in "$@" ; do
		if [[ "$arg" == '-h' || "$arg" == "--help" ]] ; then
			echo "Usage: ${FUNCNAME[0]} [-h] [-v]"
			echo "Set SSH_AUTH_SOCK environment variable."
			return
		elif [[ "$arg" == '-v' || "$arg" == "--verbose" ]] ; then
			VERBOSE=1
		elif [[ "$arg" == '-q' || "$arg" == "--quiet" ]] ; then
			QUIET=1
		else
			die "Unknown argument \"${arg}\""
		fi
	done

	# get all the existing agent files
	shopt -q extglob
	local SHOPT_PREV_VAL="$?"
	shopt -s extglob
	local agent_files="$(ls -rt /tmp/ssh-+([A-Za-z0-9 ])/agent.+([0-9]) 2>/dev/null)"
	if  [ "$SHOPT_PREV_VAL" -eq "1" ] ; then
		shopt -u extglob
	fi

	# make sure there actually are auth socks to get
	if [ -z "$agent_files" ] ; then
		[ ! "$QUIET" ] && echo "ERROR: no auth sock available"
		return
	fi

	# get the most recently added ssh auth sock
	local auth_sock="$(echo "$agent_files" | tail -1)"
	[ "$VERBOSE" ] && echo "using auth sock: $auth_sock"
	export SSH_AUTH_SOCK="$auth_sock"
}
