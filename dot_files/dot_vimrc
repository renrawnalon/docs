set nocompatible		" Explicitly turn off compatibility mode
filetype off

if isdirectory(expand("~/.vim/bundle/neobundle/.git"))
	set runtimepath+=~/.vim/bundle/neobundle/
	call neobundle#rc(expand('~/.vim/bundle/'))

	" Let NeoBundle manage NeoBundle
	NeoBundleFetch 'Shougo/neobundle.vim'
	" Brief help
	" :NeoBundleList          - list configured bundles
	" :NeoBundleInstall(!)    - install(update) bundles
	" :NeoBundleClean(!)      - confirm(or auto-approve) removal of unused bundles
	" NOTE: comments after NeoBundle commands are not allowed.

	" Recommended to install
	" After install, turn shell ~/.vim/bundle/vimproc, (n,g)make -f your_machines_makefile
	NeoBundle 'Shougo/vimproc'

	" vim-scripts repos
	NeoBundle 'L9'
	NeoBundle 'FuzzyFinder'
	NeoBundle 'scrooloose/nerdtree'

	" Installation check.
	NeoBundleCheck
endif

call plug#begin('~/.vim/plugged')
Plug 'keith/swift.vim'
call plug#end()

filetype plugin on
filetype indent on

set smartindent
set expandtab
"set number
set fileencodings=utf-8
setglobal fileencoding=utf-8
set encoding=utf-8
set ttymouse=xterm2		" mouse scrolling in vim
set mouse=a
set foldenable
set background=dark
set tabstop=4			" 4-space tab indent width
set shiftwidth=4		" allows you to use < and > to indent/unindent blocks
set softtabstop=4		" see multiple space characters as a tab
set shiftround			" Indent to nearest tab stop
set autoindent			" carries over previous indent to the next line
set smarttab			" A tab infront of a line inserts spaces or tabs according to expandtab

" Tell vim to remember certain things when we exit
"  '100 : marks will be remembered for up to 100 previously edited files
"  "100 : will save up to 100 lines for each register
"  :20 : up to 20 lines of command-line history will be remembered
"  % : saves and restores the buffer list
"  n... : where to save the viminfo files
set viminfo='100,\"100,:20,%,n~/.viminfo

set wildmode=list:longest	" When autocompleting things, do it like the shell
set wildmenu				" Autocomplete things on the menu?
set scrolloff=3				" Scroll when the cursor is 3 lines from top or bottom
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp " Editing two files with the same name but in different directories, then closing them both simultaneously will attempt to create two backup files of the same name in this directory, opening a potal to hell
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp " Editing two files with the same name but in different directories, then closing them both simultaneously will attempt to create two backup files of the same name in this directory, opening a potal to hell
set ruler					" know how far you are in a file
set enc=utf-8
set fenc=utf-8
"set fencs=iso-2022-jp,euc-jp,cp932
set backspace=indent,eol,start	" make sure backspace works correctly

set runtimepath+=~/.vim/fuzzyfinder
set runtimepath+=~/.vim/l9
set runtimepath+=~/.vim/nerdtree

" Used with gvim?
"set guifont=Bitstream\ Vera\ Sans\ Mono\ 14 "font names to be used in gui

" try to always use a syntax
syntax on

" this combination works out well to only apply case to searches
" if there is an uppercase letter in your search string
set ignorecase
set smartcase

set incsearch " Automatically jump to search term
set hlsearch  " Highlight search results

" this uses the tags file if it is found anywhere above this directory
" in a file called tags.  If it can't find it, it then looks for a file
" called build/tags in any directory above this one
set tags+=tags;$HOME,build/tags;$HOME

" always show a tabline
set showtabline=2

" Let Leader key be <Space> instead of \
let mapleader = " "

nnoremap <esc><esc> :nohlsearch<CR>

colorscheme darkblue
"colorscheme default
"colorscheme delek
"colorscheme desert
"colorscheme torte

" highlight tab line differently
hi TabLine term=bold,reverse cterm=bold ctermfg=black ctermbg=white
hi TabLineFill term=bold,reverse cterm=bold ctermfg=white ctermbg=white
hi TabLineSel term=reverse ctermfg=white ctermbg=lightblue

" highlight the popup menu a little differently
hi PmenuSel ctermbg=lightblue

" make sure the normal background is black
hi Normal guibg=black

" use <Leader>h for turning off and on hlsearch
map <Leader>h :set hlsearch!<CR>

" use <C-h> and <C-l> to go forward and backward in tabs
" nnoremap just makes a normal mode mapping
nnoremap <C-h> gT
nnoremap <C-l> gt

" Jump to current file in tree
nnoremap <Leader>n :NERDTreeFind<CR>
" Toggle NERDTree
nnoremap <Leader>m :NERDTreeToggle<CR>
" File search on FuzzySearch
nnoremap <Leader>b :FufFile<CR>

" in input mode, what about we try using jj as escape
inoremap jj <Esc>

function! MConst()
	@m
endfunction

function! HConst()
	@h
endfunction

function! AddComments()
	@a
endfunction

function! Brackets()
	@r
endfunction

let @a=":%s#^#\\r/\*\*\\r \*/\\r#\<C-m>"
let @r=":%s/;/\\r{\\r}\\r/\<C-m>"
let @x=":%s/:.*//g\<C-m>:%s/\"//g\<C-m>:%s/\\s//g\<C-m>"
let @y=":%s/:.*//g\<C-m>:%s/\"//g\<C-m>:%s/\\s//g\<C-m>:%s#_\\([a-z]\\)#\\u\\1#g\<C-m>"
let @z=":%s/-\\s\(//\<C-m>:%s/\*\)/\*/\<C-m>:%s/\)/ /\<C-m>:%s/;/ = [_paramDictionary nullObjectForKey:PARAM_RECEIVE_];\<C-m>"
let @l=":%s#_\\([a-z]\\)#\\u\\1#g\<C-m>"
let @c=":%s/:.*//g\<C-m>:%s/\"//g\<C-m>:%s#_\\([a-z]\\)#\\u\\1#g\<C-m>:%s/$/;/g\<C-m>:%s/\\s//g\<C-m>"
let @m=":%s/:.*//g\<C-m>:%s/\"//g\<C-m>:%s/\\s//g\<C-m>:g/.*/t.|-j\<C-m>:%s/^\\(\\w*\\)/\\U\\1/\<C-m>:%s/\\s/ = @\"\<C-m>:%s/$/\";\<C-m>:%s/^/const NSString *PARAM_RECEIVE_/g\<C-m>"
let @h=":%s/:.*//g\<C-m>:%s/\"//g\<C-m>:%s/\\s//g\<C-m>:%s/^\\(\\w*\\)/\\U\\1/\<C-m>:%s/$/\;\<C-m>:%s/^/extern const NSString *PARAM_RECEIVE_/g\<C-m>"
let @i=":s/^/- \(int\)\<C-m>"
let @f=":s/^/- \(CGFloat\)\<C-m>"
let @s=":s/^/- \(NSString \*\)\<C-m>"
let @b=":s/^/- \(BOOL\)\<C-m>"
let @d=":%s#\\(.*\\)\\t\\(.*\\)\\t.*#\\1,\\2#\<C-m>"
